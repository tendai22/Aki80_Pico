;
; Copyright (c) 2020 Raspberry Pi (Trading) Ltd.
;
; SPDX-License-Identifier: BSD-3-Clause
;

; 14 MREQ
; 15 RFSH
; 16 BUSAK
; 17 IORQ
; 18 RD
; 19 A0
; 20 RAMCE2
; 21 RAMWE
; 22 TEST
; 23 NC
; 24 NC
; 25 NC
; 26 RESET
; 27 WAIT
; 28 BUSRQ
; 29 NC

; SET pin 0 should be mapped to your LED GPIO

; JMP_PIN:  15(RFSH_Pin)
; SET_BASE: 27(WAIT_Pin), COUNT: 1
; 11 instructions
.program databus_control
    wait 1 gpio 26       ; wait for RESET negate
    wait 1 gpio 14       ; wait for MREQ High
.wrap_target
top:
    wait 0 gpio 14       ; wait MREQ Low
    jmp pin mreq_handle     ; RFSH cycle, skip it
    jmp top
mreq_handle:
    set pins, 2         ; WAIT Low, BUSRQ High
    push                ; notify an access occurs
    pull                ; wait for RD/WR databus handling over
    set pins, 1         ; WAIT High, BUSRQ Low
    wait 1 gpio 14       ; wait for MREQ cycle end
    push                ; notify end-of-cycle
    wait 0 gpio 16      ; wait for BUSAK Low
    pull                ; wait for PINDIR 0x00
    set pins, 3         ; WAIT High, BUSRQ High
.wrap

% c-sdk {
// this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

void databus_control_program_init(PIO pio, uint sm, uint offset) {
    // SET_BASE: 27(WAIT_Pin), 28(BUSRQ_Pin), COUNT: 2
    pio_gpio_init(pio, 27);      // WAIT_Pin
    pio_gpio_init(pio, 28);      // WAIT_Pin
    pio_sm_set_consecutive_pindirs(pio, sm, 27, 2, true);    // as output
    pio_sm_config c = databus_control_program_get_default_config(offset);
    sm_config_set_set_pins(&c, 27, 2);
    // JMP_PIN:  15(RFSH_Pin)
    pio_gpio_init(pio, 15);         // RFSH_Pin
    sm_config_set_jmp_pin(&c, 15);
    pio_sm_init(pio, sm, offset, &c);
}
%}